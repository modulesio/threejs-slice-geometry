!function(){"use strict";var a="front",b="back",c="straddle",d="on";window.sliceGeometry=function(h,j){var k=new THREE.Geometry;h.faces.forEach(function(b,l){var m=g(h,b,l),n=i(j,m);n==a||n==d?f(k,m):n==c&&e(j,k,m,a)});var l=new THREE.Geometry;return h.faces.forEach(function(a,d){var k=g(h,a,d),m=i(j,k);m==b?f(l,k):m==c&&e(j,l,k,b)}),[k,l]};var e=function(a,b,c,d){var e,g,i,k,l,m,n=c.length,o=[];for(e=0;e<n;e++)g=c[e],i=e+1<n?c[e+1]:c[0],k=h(g,i,a),l=j(a,g.vertex),m=j(a,i.vertex),l==d&&o.indexOf(g)===-1&&o.push(g),k&&o.push(k),m==d&&o.indexOf(i)===-1&&o.push(i);o.length>3?(f(b,[o[0],o[1],o[2]]),f(b,[o[2],o[3],o[0]])):f(b,o)},f=function(a,b){var c,d,e=[],f=a.vertices.length,g=[],h=[];b.forEach(function(b){return c=a.vertices.indexOf(b.vertex),c!==-1?e.push(c):(a.vertices.push(b.vertex),e.push(f),f+=1),b.normal&&g.push(b.normal),b.uv&&h.push(b.uv),!d});var i=new THREE.Face3(e[0],e[1],e[2],g);a.faces.push(i),h.length&&a.faceVertexUvs[0].push(h)},g=function(a,b,c){var d=a.faceVertexUvs[0];return["a","b","c"].map(function(e,f){return{vertex:a.vertices[b[e]],normal:b.vertexNormals[f],uv:d[c]?d[c][f]:void 0}})},h=function(a,b,c){var d=new THREE.Line3(a.vertex,b.vertex),e=c.intersectLine(d);if(e){var f=a.vertex.distanceTo(e),g=f/d.distance();return{vertex:e,normal:a.normal.clone().lerp(b.normal,g).normalize(),uv:a.uv&&b.uv?a.uv.clone().lerp(b.uv,g):null}}},i=function(e,f){var g=j(e,f[0].vertex),h=j(e,f[1].vertex),i=j(e,f[2].vertex);return g==b||h==b||i==b?g==a||h==a||i==a?c:b:g==a||h==a||i==a?g==b||h==b||i==b?c:a:d},j=function(c,e){var f=c.distanceToPoint(e);return f<0?b:f>0?a:d}}();